_________________________________________________________________________________________________________________

                                          Ancient Games Help Guide

                                            1. INTRODUCTION

_________________________________________________________________________________________________________________


                                                WELCOME


"As the author, I always wanted to learn programming. Growing up in the 90s shareware gaming era, the internet 
wasn't as widespread, fast, affordable, or accessible during that time period. The lack of the Internet left 
very few ways to enjoy video games. Electronic games were mainly accessed through the arcade, which was an 
expensive hobby, handheld and home game consoles, which had little public documentation, leaving the only way 
to judge a game's fun to viewing the boxed art, leaving little room for errors in judgment and another 
expensive endeavor.

Thankfully, operating systems at the time had free inbuilt games that became the subject of speculation and 
fascination. However, the only way to enjoy the games at that age or time was limited to access on school 
computers with limited libraries of installed games, and with supervision, leaving approval of games played up 
to the ever-dominant and watchful eyes of the teachers' moral approval.

This left the only way to enjoy games repeatedly without any costly endeavors were the utopian abundance of 
demonstration games known as demos, which were free, limited in gameplay and/or ownership rights, samples of 
computer games. 
The easiest method of obtaining them was from digital storage media at the time known as, floppy disks shortened 
to floppies and CD-ROMs shortened to CDs bundled as free promotional samples with technology magazines that 
were often purchased from news agencies.

The low cost of the barrier, ease, often non-existent standards to program and develop computer games meant that 
many game developers published their works often through the aforementioned media, and the time period was 
colloquially and fondly referred to as the Shareware era. Shareware is any commercial software that is 
distributed free, encouraging owners to donate or pay for the complete licensed and often unlocked version.
Shareware games could be copied for free on other media and spread to families and friends, bringing the 
cost barrier to electronic gaming down to accessible levels.

Floppies and CDs would be inserted and the drive accessed on the computer, where you could browse the game's 
contents known as folders in Windows. Games folders would contain many files such as images, videos, music known 
as assets used by the game, as well as the executables, the software to run and play the game. The lack of 
knowledge on video games and digital media at the time meant that browsing a game's content on the computer could 
lead to finding cheats about a game, viewing fascinating artwork, stories in game manuals, that could be copied 
to the local computer and accessed anytime, leading to a revolution in video game ownership contrasted to 
expensive arcade visits with coin slot machines and foreign expensive priced game consoles and cartridge games.

The process of acquiring a new game-filled floppy or CD with new mysterious experiences and browsing the contents 
on a computer and adding them to my growing collection created lifelong positive memories. The acquisition of 
new games and thus technology became my passion.

In memory of the Shareware developers that created media that brought joy to my life, I wanted to replicate the 
process. Learning video game development was a step in the right direction. C++ was a programming language at the 
time I remember in my deepest memories; I could recall many advising it as the next best technology. Although C++
has been overtaken by newer programming languages, I wanted to replicate the old mysterious process of my 
shareware heroes and create a simple 90s-style shareware era game and related contents such as this manual.

Recreating historical board games as a computer game was a simple, interesting, and replayable project I could 
attempt, and thus I set out on a year and a bit more journey to fulfill. Programming this video game was one of 
the most enjoyable experiences in my life and brought closure to an innermost fascination I held being on a 
journey emulating my shareware era developer heroes I admired when younger.

Thus, I hope this story and game evoke similar enjoyable moments for you. I encourage you, at least once in your 
life, to pursue a nostalgic lifelong fascination you have, as it may bring closure to subconscious desires."

                                      Sumeet Singh, February 2024.




_________________________________________________________________________________________________________________

                                            TABLE OF CONTENTS

_________________________________________________________________________________________________________________


1. Introduction
2. License
3. Setup
4. Program logic
5. Games and Rules
6. Credits


_________________________________________________________________________________________________________________

                                                2. LICENSE

_________________________________________________________________________________________________________________

MIT License

Copyright (c) 2023 Sumeet Singh

Source Code License:
The source code in this project is licensed under the MIT License.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
[MIT License terms]

Graphical Assets License:
The graphical assets in this project are licensed under the Creative Commons Attribution (CC-BY) License.
Individual authors are attributed within the `MANUAL.txt` file "Credits" section.

Component Library Licenses:
Note: This project includes components licensed under different terms:

- Libzip: See `./src/libzip/LICENSE` for details.
- Curl: See `./src/curl/COPYING.txt` for details.
- SDL2: See `./src/SDL2/COPYING.txt` for details.
- SDL2 image: See `./src/SDL2_image/LICENSE.txt` for details.
- SDL2 Mixer: See `./src/SDL2_Mixer/LICENSE.txt` for details.
- SDL2 TTF: See `./src/SDL2_TTF/LICENSE.txt` for details.


_________________________________________________________________________________________________________________

                                                3. SETUP

_________________________________________________________________________________________________________________


GAME DETAILS

Game Name: Ancient Games
Project name: Games of the Ancients
Creation: 26/09/2023
Version: 0.1
Author: Sumeet Singh @ www.sumeet-singh.com
Publisher: AgniSamooh @ www.agniSamooh.com
License: Source Code License: MIT License. Graphical Assets License: Creative Commons Attribution (CC-BY) 
License.



GAME DESCRIPTION

Ancient Games is a C++ programming language developed game in which players can play different traditional 
board and hand games from different ancient cultures around the world.
There are achievements that can be unlocked through completing specific objectives in the game such as winning your
first game, or winning all games against a computer (AI) opponent at least once.
You can locate games by starting a new game then clicking on any location on the world map marked by a landmark.
Before the game starts you can configure game settings such as rounds (lives), timer, who starts first and position.
You may view the rules for each game in the help (book icon) section.
You may also join or create online multiplayer games with others and friends to compete.


CAMPAIGN / STORY MODE

As a university professor specializing in teleportation research, I had always been fascinated by the 
possibilities of time travel. But when a mishap in my lab sent me hurtling back in time, I found myself in a 
predicament unlike any I had ever faced.

Lost and disoriented, I soon realized that the only way to return to my own time was to repair the teleportation 
device I had inadvertently triggered. However, the manual I desperately needed had been reduced to ashes, leaving 
only scattered fragments in various languages.

With no resources to afford language lessons, I wandered aimlessly, feeling hopeless and alone. That is until I 
stumbled upon a group of street kids engrossed in an ancient game played with circles drawn in the sand, sticks as 
lines, and stones as players.

Watching them play, I had a sudden revelation. The game they were playing bore a striking resemblance to Tic Tac Toe, 
a childhood favorite of mine. As the kids enthusiastically explained the rules in their own language, I realized that 
this game could serve as a bridge between my existing knowledge and the languages I needed to learn.

Determined to piece together the fragments of the manual, I embarked on a journey across the globe, joining in games 
with people from different cultures and backgrounds. Through these interactions, I began to piece together words and 
phrases, linking them to what I already knew.

Day by day, my understanding of languages grew, and with each new piece of information, I made progress in deciphering 
the manual. As I traveled, I encountered kindness and generosity from strangers who were eager to share their 
knowledge and language skills.

Eventually, after months of dedication and perseverance, I finally completed the manual, using my newfound linguistic 
abilities to understand the intricate instructions for repairing the teleportation device.

With the device restored, I bid farewell to my newfound friends and activated the teleporter, feeling a mix of 
excitement and apprehension as I prepared to return to my own time.

As the familiar hum of the teleportation process enveloped me, I closed my eyes, grateful for the unexpected journey 
that had led me to this moment. And with a leap of faith, I stepped forward into the unknown, eager to resume my 
life but forever changed by the experiences that had shaped my journey home.


HELP

Found in game by clicking on "Help" (Book) option in main menu or read README.txt file



REQUIREMENTS

* Supported OS: Windows 7+
* Processor: at least 7th gen Intel Core i3 or AMD equivalent
* RAM: 4 GB RAM
* Graphics: Either CPU's dedicated GPU, or any HD output capable GPU
* Storage: 5 GB available space



ACCESSIBILITY

* Supported full controllers: Mouse, Keyboard, Gamepad, Touch
(Key bindings can be changed via in game settings, key bindings button)

* Supported full languages:
(Languages can be changed via in game settings, language button)
1. ENGLISH
2. 日本語 (Japanese)
3. ภาษาไทย (Thai)
4. संस्कृतम् (Sanskrit)
5. 中文 (Traditional Chinese)
6. العربية (Arabic)
7. ግዕዝ (Ge'ez)
8. Ελληνικά (Greek)
9. Latina (Latin)



SETUP

1. Download zipped game folder from GitHub here:
https://github.com/SumeetSinghJi/ancient-games/archive/refs/heads/main.zip

2. Unzip to computers user directory in new folder
For Windows: c:\users\username\ancient-games
For MacOS: default download folder
For Linux: /home/username/ancient-games

3. Run below file to start game
For Windows: main.exe
For Linux: main
For MacOS: copy over this file main.bin to applications folder and accept default priviliges



_________________________________________________________________________________________________________________

                                        4. PROGRAM LOGIC

_________________________________________________________________________________________________________________



GAME ENGINE

* Game written in C++ C++17 minimum standard, due to inclusion of modern headers such as 
std::filesystem header #include <filesystem>
* Currently compiles with g++ (part of MinGW/GNU), untested with clang and msvc
* Includes IDE development files for Visual Studio Code within .vscode folder which includes;
   4 tasks.json tasks for Compilers; g++ and clang and Static Analysers; cppcheck and clang tidy
* Includes CMAKElists.txt compile file with associated ./build folder for building locally
* The Game Engine is called Māyāyantra 
(A Compound word Translated in Sanskrit as मायायन्त्र and English as IllusionInstrument) is the UI source code 
logic which includes all files within this project with the exception of the files specific to this game below;
* ./headers/games/*.hpp
* ./documents
* ./assets/graphics/backgrounds/title_background.jpg
* MANUAL.txt
* README.md
* ancient-games* (files starting with Ancient Games)
* Any mention of scene 25 = the Starting point of the interaction between the Game Engine and the Game.
So if your game is a simple Car/Ship racing game, change all scene 25 logic to interact with you're
specific game as outlined in ./headers/games (see below MODDING section)



MODDING

Game is built ontop the Māyāyantra game engine (see above GAME ENGINE section). To mod game follow below 
instructions

Step 1. In MANUAL.txt find a free scene marked as _____UNUSED_____ in scenes section.
Step 2. Create a game as a C++ header.hpp file similar to existing header games within ./headers/games
Step 3. Add the games specific code for handle(), update(), draw() to core_game_logic() handle(), update(), draw()
Step 4. Integrating achievements can be done with the unlockedAchievements[i] value in the trigger condition logic
of your game. E.g. on winning your Car Racing sim game in ./headers/games/car_game.hpp set unlockedAchievements[0]
then in scene 4 (achievements) you can set custom achievement txt in ./headers/sdl_texts.hpp 



LIBRAIRES

Game uses the following third party libraries.

1. SDL2: https://github.com/libsdl-org/SDL - Used for creating a Window and rendering buttons and key inputs
2. SDL2_image: https://github.com/libsdl-org/SDL_image - Library for adding non images JPG/PNG etc., to a SDL2 
Applicaiton
3. SDL2_Mixer: https://github.com/libsdl-org/SDL_mixer - Library for adding sound/music to a SDL2 application
4. SDL2_TTF: https://github.com/libsdl-org/SDL_ttf - Library for rendering text/font to SDL2 Window
5. CURL: https://github.com/curl/curl - Library for web content gathering and posting for online services 
and multiplayer
6. libzip: https://github.com/nih-at/libzip - Library for extracting Zip files used for extracting 
downloaded game zip from source repository


FILES

The below files are contained in the downloaded game directory

./vscode - vscode configuration files
./assets - subdirectories of assets e.g. images, sounds, fonts
./documents - Contains game documents such as manuals, policies with translations
./headers - C++ header files
./src - Source code and Third party libraries
./tests - Tests directory, contains various game development tests using Google Tests library
.gitignore - Used in development file
Ancient Games.lnk - Windows shortcut used in update_app.hpp update function to copy to desktop
ancient-games_save.txt - in game save file
ancient-games.code-workspace - vscode configuration file
CMAKEllists.txt - Used in development file
LICENSE - Hosts a full copy of license same as within manual. Seperated for Github metadata
main.cpp - Implementation file
main.exe - Game executable
MANUAL.txt - Contains information about game
README.md - Github source repository introduction document
TASKS.txt - Issue and Bug tracker
Various DLL's for third party libraries in ./src {
    libcurl-x64.dll - libcurl
    libzip.dll - libzip
    SDL2_image.dll - SDL2 Image
    SDL2_mixer.dll - SDL2 Mixer
    SDL2_TTF.dll - SDL2 TTF/Font
    SDL2.dll - SDL2
}




GAME NAVIGATION

Game menu and navigation is based on SDL Game design best practice "scenes".
There are scenes for all different menu options e.g. Settings, or Credits, and a
central hub "scene 6" for in game ancient map which interconnects with other in game
scenes e.g. "scene 30 = Beijing" where different maps/levels/scenes can be accessed
which all have slight variations of the named function start_spr_game() function depending 
on regional variations.

headers SDL_renders and SDL_texts will load the HUD depending on regional variation of game.
Navigating through scene is dependent on handle_events() button clicks in GAME LOGIC

Graphical navigation is dictated by button object created from the Custom_SDL_button class
within custom_SDL_button.hpp that are clickable as defined in sdl_mouse_handles.hpp



Uses headers;

#include "headers/sdl_loads.hpp"            // SDL Textures, Sounds, Animations to load
#include "headers/sdl_renders.hpp"          // SDL Rect/Buttons to render to screen/scene/GUI
#include "headers/sdl_texts.hpp"            // SDL Text to Render to screen/scene/GUI
#include "headers/sdl_mouse_handles.hpp"    // SDL Mouse and Touch keypresses
#include "headers/sdl_keyboard_handles.hpp" // SDL Keyboard keypresses
#include "headers/sdl_gamepad_handles.hpp"  // SDL Gamepad controller keypresses
#include "headers/custom_SDL_button.hpp"    // Custom SDL Button class for creating buttons for handles



GAMEPLAY

Each individual board or hand video game is encapsulated within it's own header file which uses shared
SDL logic with the main and related headers.

Uses headers;
#include "headers/tic_tac_toe.hpp"          // Scene 32 - Rome - Tic Tac Toe



SAVING AND RESTORING GAME

A save game text file ancient-games_save.txt is created on SDL Quit and on main menu Continue button loaded.

Uses headers;
#include "headers/save_game.hpp"             // For save/continue functions



UPDATING GAME

There is an in game option to update game. It will contact the GitHub repository hosting game then look
for string "Version: " in GitHub repo front page README.md file and compare with local README.md file.
If different prompt will appear to download latest version which;

* Downloads latest file
* Copies over save
* Deletes old game directory

IMPORTANT: In README.md string "Version: " must be on a new line without dot point (*) in front of text e.g.
Version: 0.1

Uses headers;
#include "headers/update_app.hpp"        // For downloading latest game update



MULTIPLAYER

Multiplayer use requires creating an account which consists of a username, email and password. During
new game or when Multiplayer scene is selected an option will appear to sign up and register for online
services. Once Privacy Policy and Terms and Conditions are accepted, a CURL function will push user account 
details to the developers website/webserver i.e, agnisamooh.com A verification email will be sent out to users
to verify their account. Once verified users will be able to login and view, host and join server or user
created games for online play. Users can find, add and communicate with friends in game and play along with 
them. Leaderboard information will be available in game and publically as per privacy policy notice if 
enforced.

Uses headers;
#include "headers/multiplayer.hpp"          // For Multiplayer



SCENES

Scenes represent logical segregation of game menus.

Each scene comes with it's own

* mouse_handle() - for run_SDL()
* gamepad_handle() - for run_SDL()
* keyboard_handle() - for run_SDL()
* sdl_renders() - for SDL_draw()
* sdl_texts() - for SDL_draw()
* SDL_draw() - Logic for music goes here

All scenes are below. Any scene labelled _____UNUSED_____ can be used for development and modding.

scene 1 = Main menu
scene 2 = Settings
scene 3 = Credits
scene 4 = Achievements
scene 5 = Help
scene 6 = Leaderboard
scene 7 = _____UNUSED_____
scene 8 = _____UNUSED_____
scene 9 = _____UNUSED_____
scene 10 = keybindings
scene 11 = Online login
scene 12 = Create account
scene 13 = multiplayer lobby
scene 14 = _____UNUSED_____
scene 15 = _____UNUSED_____
scene 16 = _____UNUSED_____
scene 17 = _____UNUSED_____
scene 18 = _____UNUSED_____
scene 19 = _____UNUSED_____
scene 20 = _____UNUSED_____
scene 21 = _____UNUSED_____
scene 22 = _____UNUSED_____
scene 23 = _____UNUSED_____
scene 24 = _____UNUSED_____
scene 25 = World map
scene 26 = _____UNUSED_____
scene 27 = _____UNUSED_____
scene 28 = _____UNUSED_____
scene 29 = _____UNUSED_____
scene 30 = Tutorial - Tic Tac Toe
scene 31 - beijing - Go
scene 32 = london (Celtic)- Fidhchell
scene 33 = Ethiopia (Yeha) - Mancala
scene 34 = Cairo - Senet
scene 35 = Delhi (Aryavarta) - Pachisi
scene 36 = Tehran (Persia) - Backgammon
scene 37 = Mexico - Patolli
scene 38 = Baghdad (Babylonian) - Royal game of Ur
scene 39 = Greece - Petteia
scene 40 - Rome - terni lapilli
scene 41 - _____UNUSED_____
scene 42 - _____UNUSED_____
scene 43 - _____UNUSED_____
scene 44 - _____UNUSED_____
scene 45 - _____UNUSED_____
scene 46 - _____UNUSED_____
scene 47 - _____UNUSED_____
scene 48 - _____UNUSED_____
scene 49 - _____UNUSED_____
scene 50 - _____UNUSED_____



UNLOCKABLE ACHIEVEMENTS

The list of all achievements that can be unlocked while completing objectives playing the game are below

1. Won first game
2. 
3. 
4. 
5. 
6. 
7. 
8. 
9. 
10. Won all games







_________________________________________________________________________________________________________________

                                            5. GAMES AND RULES
                                    
_________________________________________________________________________________________________________________


Beijing (China) - Rock paper scissors (Chinese; romanized: Shoushiling, traditional: 手勢令. simplified: 手势令)

A seemingly simple game of chance, has woven its way into cultures ancientwide, transcending generations and 
borders. Despite its apparent simplicity, its origins are steeped in history, folklore, and strategic 
subtleties. This humble game finds its roots in ancient civilizations and evolves continuously, embracing
new forms and variations.

Origins and Folklore:
The exact origins of rock-paper-scissors are shrouded in mystery, with multiple theories tracing its roots
across different cultures. One of the earliest known versions dates back to China during the 
Han Dynasty (206 BCE – 220 CE). This version, known as "shoushiling," featured hand gestures representing
a rock, a piece of cloth, and scissors. Legend has it that this game was used to resolve disputes and make 
decisions, much like its contemporary usage.

Another theory traces its origins to Japan, where the game was called "jan-ken." It was believed to have
been introduced in the 17th century, gaining popularity among children and adults alike. In Japanese 
folklore, it's said that the game was used by samurai to settle conflicts and make decisions in a manner
that was akin to divination.

Rules and Gameplay:
The game revolves around three elements: rock, paper, and scissors. Each element defeats one and is defeated
by another, creating a cyclic relationship:

Rock crushes scissors.
Scissors cut paper.
Paper covers rock.
Players face off by simultaneously forming one of the three shapes with their hands. After a count or a 
chant, both reveal their chosen gesture, and the winner is determined based on the hierarchy of interactions. 
The game often follows a best-of-three or best-of-five format, adding suspense and strategy.

Cultural Significance and Variations:
Rock-paper-scissors is not merely a game but a cultural phenomenon. It has made its way into various aspects 
of society, from resolving disputes to being used in decision-making processes. Its simplicity and universality 
have led to its integration into pop culture, sports, and even academic research.

Interestingly, different cultures have their variations of the game. For instance, the Korean version, 
"kai-bai-bo," features similar hand gestures but with different names and meanings. In some versions, 
there are additional elements like a well, a lion, or a spock, introducing further complexities and strategies.

Unique Trivia:
Competitive Tournaments: Believe it or not, there are competitive rock-paper-scissors tournaments held 
ancientwide. Participants strategize and compete for prizes, showcasing their skill in a seemingly luck-based 
game.

AI and Strategy: Researchers have developed AI programs specifically designed to excel at rock-paper-scissors. 
These programs analyze patterns in human behavior and adapt strategies, demonstrating the complexities within 
what seems like a simple game.

Decision-Making Tool: Beyond its entertainment value, rock-paper-scissors has found applications in 
decision-making processes. Its randomness and unbiased nature make it an interesting tool in scenarios 
where impartial choices are needed.

In summary, rock-paper-scissors transcends its simplistic appearance, embodying centuries of cultural 
heritage and human interaction. Its adaptability and universality continue to fascinate and entertain people 
across the globe, proving that even the simplest of games can carry profound significance in society.



_________________________________________________________________________________________________________________

                                            6. CREDITS
                                    
_________________________________________________________________________________________________________________


                                    Game developer - Sumeet Singh


                "I made this in honour of all the 80's and 90's Shareware era developers"


                                        BACKGROUND IMAGES

                Background scenes created by A.I. art @ creator.nightcafe.studio


                                               SOUNDS

                                Music @ pixabay.com
                                Sound effects @ pixabay.com


                                        SETTINGS BUTTONS
                    achievement-button.png by MD BADSHA MEAH @ icon-icons.com
                    back-button.png by Google @ icon-icons.com
                    book-button.png by ChrisL21 (Chris) @ icon-icons.com
                    Business-target-Icon.png by AomAm @ icon-icons.com
                    computer-button.png by Vexels @ icon-icons.com
                    difficulty-button.png by Icons8 @ icon-icons.com
                    Font-button.png by Ant design @ icon-icons.com
                    forward-button.png by Google @ icon-icons.com
                    human-button.png by Bryn Taylor @ icon-icons.com
                    internet-button.png by Treetog ArtWork @ icon-icons.com
                    Keyboard-button.png by Google Noto Emoji Objects @ icon-icons.com
                    language-button.png by Google @ icon-icons.com
                    load-button.png by Nick Frost and Greg Lapin @ icon-icons.com
                    newgame-button.png by Royyan Wijaya @ icon-icons.com
                    quit-button.png by Icomoon @ icon-icons.com
                    resolution-1300x768-button.png by Neuicons @ icon-icons.com
                    resolution-800x600-button.png by Neuicons @ icon-icons.com
                    resolution-Full-Screen-button.png by Steve Schoger @ icon-icons.com
                    restart-button.png by Radhika Paghdal @ icon-icons.com
                    return-button.png by Becris @ icon-icons.com
                    save-button.png by Nick Frost and Greg Lapin @ icon-icons.com
                    sound-off-button.png by Kreasi Kanvas @ icon-icons.com
                    sound-on-button.png by Maria & Guillem @ icon-icons.com
                    star.png by Gianni Polito @ icon-icons.com
                    swap-button.png by Webalys @ icon-icons.com

                  All button images with missing attributions @ respective
                        authors @ icon-icons.com, or FreePik.com


                                        BOX BUTTONS
                    computer_mouse.png @ monkeypen.com
                    game_controller.png by user; nicefrog @ opengameart.org
                    keyboard_cartoon.png by juicy_fish @ Freepik.com
                    keyboard_realistic.png by juicy_fish @ Freepik.com
                    
                    
                                        COUNTRY BUTTONS

                    England map icon by Bart Kowalski @ icon-icons.com
                    Beijing/China map icon by Rokey @ icon-icons.com
                    Shanghai map icon by Google @ icon-icons.com
                    Seoul map icon by maxicons @ icon-icons.com
                    Japan map icon by maxicons @ icon-icons.com
                    Hawaii map icon by Zulfa Mahendra @ icon-icons.com
                    Berlin map icon by Manthana Chaiwong @ icon-icons.com
                    Paris map icon by Oleksandr Yershov @ icon-icons.com
                    Delhi map icon by Jemis Mali @ icon-icons.com
                    Singapore map icon by Icons-Land @ icon-icons.com
                    Rome colosseum map icon by Iconka @ icon-icons.com


                                        BOARD GAME GRAPHICS

                    Soltaire Playing cards - https://opengameart.org/content/playing-cards-vector-png
                    Senet board image - https://thiefontheflats.blogspot.com/2012/01/printable-senet-boards.html


                                            ANIMATIONS

                    Fireworks animation by @haenaillust @ giphy.com




