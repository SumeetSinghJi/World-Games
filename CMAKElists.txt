# Uses instructions here for SDL CMAKE Setup:
cmake_minimum_required(VERSION 3.12)

project(World-Games)

find_package(SDL2 REQUIRED HINTS "${CMAKE_SOURCE_DIR}/src/SDL2/cmake")
if(NOT SDL2_FOUND)
    message(WARNING "Error: SDL2 find_package() failed")
else()
    message(STATUS "Success: SDL2 find_package() found")
endif()

find_package(SDL2_Image REQUIRED HINTS "${CMAKE_SOURCE_DIR}/src/SDL2_image/cmake")
if(NOT SDL2_Image_FOUND)
    message(WARNING "Error: SDL2_Image find_package() failed")
else()
    message(STATUS "Success: SDL2_Image find_package() found")
        set(SDL2_Image_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/SDL2_image/x86_64-w64-mingw32/include/SDL2")
        set(SDL2_Image_LIBRARY "${CMAKE_SOURCE_DIR}/src/SDL2_image/x86_64-w64-mingw32/lib")
endif()

find_package(SDL2_Mixer REQUIRED HINTS "${CMAKE_SOURCE_DIR}/src/SDL2_Mixer/cmake")
if(NOT SDL2_Mixer_FOUND)
    message(WARNING "Error: SDL2_Mixer find_package() failed")
else()
    message(STATUS "Success: SDL2_Mixer find_package() found")
        set(SDL2_Mixer_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/SDL2_Mixer/x86_64-w64-mingw32/include/SDL2")
        set(SDL2_Mixer_LIBRARY "${CMAKE_SOURCE_DIR}/src/SDL2_Mixer/x86_64-w64-mingw32/lib")
endif()

find_package(SDL2_TTF REQUIRED HINTS "${CMAKE_SOURCE_DIR}/src/SDL2_TTF/cmake")
if(NOT SDL2_TTF_FOUND)
    message(WARNING "Error: SDL2_TTF find_package() failed")    
else()
    message(STATUS "Success: SDL2_TTF find_package() found")
        set(SDL2_TTF_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/SDL2_TTF/x86_64-w64-mingw32/include/SDL2")
        set(SDL2_TTF_LIBRARY "${CMAKE_SOURCE_DIR}/src/SDL2_TTF/x86_64-w64-mingw32/lib")
endif()

find_package(CURL QUIET HINTS "${CMAKE_SOURCE_DIR}/src/curl")
if(NOT CURL_FOUND)
    message(WARNING "Error: CURL find_package() failed")
else()
    message(STATUS "Success: CURL find_package() found")
        set(CURL_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/curl/include/curl")
        set(CURL_LIBRARY "${CMAKE_SOURCE_DIR}/src/curl/lib")
endif()

find_package(libzip REQUIRED HINTS "${CMAKE_SOURCE_DIR}/src/libzip")
if(NOT libzip_FOUND)
    message(WARNING "Error: libzip find_package() failed")
else()
    message(STATUS "Success: libzip find_package() found")
endif()

# loop over cmake variables to find matching string "", in cmake wildcard is ".*"
#get_cmake_property(_variableNames VARIABLES)
#foreach (_variableName ${_variableNames})
#    if (_variableName MATCHES ".*TTF.*")
#        message(STATUS "${_variableName}=${${_variableName}}")
#    endif()
#endforeach()
set(SOURCES
    main.cpp
    ./src/core_game_logic.cpp
)

add_executable(World-Games ${SOURCES})

target_include_directories(World-Games PRIVATE
    ${SDL2_INCLUDE_DIRS}
    ${SDL2_Image_INCLUDE_DIRS}
    ${SDL2_Mixer_INCLUDE_DIRS}
    ${SDL2_TTF_INCLUDE_DIRS}
    ${CURL_INCLUDE_DIRS}
    ${libzip_INCLUDE_DIRS}
    headers
    # assets - do not add. .exe/automatically detects path based on hardcoding
)

target_link_libraries(World-Games
    ${SDL2_LIBRARIES}
    ${SDL2_Image_LIBRARIES}
    ${SDL2_Mixer_LIBRARIES}
    ${SDL2_TTF_LIBRARY}/libSDL2_ttf.a
    ${CURL_LIBRARY}
    ${LIBZIP_LIBRARIES}
    ws2_32 # for #include <winsock.h>
    stdc++ # C++ Standard library, required if your main.cpp has it's #includes in another header
)

set_target_properties(World-Games PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}) #output .exe to "./"
