#include <iostream>
#include <chrono>
#include <thread>
#include <vector>
#include <string>
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <SDL_mixer.h>

/*

tasks.json args to use

"args": [
                "-fdiagnostics-color=always",
                "-I${fileDirname}",
				"-I./src/SDL2/x86_64-w64-mingw32/include/SDL2", // SDL2 header folder
                "-I./src/SDL2_image/x86_64-w64-mingw32/include/SDL2", // SDL2 Image header folder
                "-I./src/SDL2_Mixer/x86_64-w64-mingw32/include/SDL2", // SDL2 Mixer header folder
                "-I./src/SDL2_TTF/x86_64-w64-mingw32/include/SDL2", // SDL2 TTF header folder
                "-g",
                "${file}", // uncomment for only building main.cpp
                // "${fileDirname}/*.cpp", // uncomment for combining all .cpp files
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe",
				"-L./src/SDL2/x86_64-w64-mingw32/lib", // SDL2 lib folder
                "-L./src/SDL2_Image/x86_64-w64-mingw32/lib", // SDL2 Image lib folder
                "-L./src/SDL2_Mixer/x86_64-w64-mingw32/lib", // SDL2 Mixer lib folder
                "-L./src/SDL2_TTF/x86_64-w64-mingw32/lib", // SDL2 TTF lib folder
				"-lmingw32", // MingW compiler library found here C:\msys64\mingw64\lib\libmingw32.a
				"-lSDL2main", // SDL2 library
				"-lSDL2", // SDL2 library
				"-lSDL2_image", // SDL Image
				"-lSDL2_ttf", // SDL TTF
				"-lSDL2_mixer", // SDL Mixer
				// "-mwindows" // for removing cmd when .exe is run, for final release only
            ],

*/

int windowWidth = 1200;
int windowHeight = 800;
bool quit = false;
int fontSize = 24;

// SDL
SDL_Window *window;
SDL_Renderer *renderer;
SDL_Event event;
SDL_GameController *controller;

// SDL Image
SDL_Texture *splashScreenTexture;

// SDL Font
TTF_Font *font_24;
TTF_Font *font_36;
TTF_Font *font_48;

// SDL Music
Mix_Music *music;
Mix_Chunk *sfx;

// MUSIC SETTINGS VARIABLES
bool isMusicPlaying = NULL;
std::string currentSong = "";                                  // for music
std::string songTitle = "assets/sounds/music/8 bit dream land - Pixabay.mp3"; // for music

void load_fonts()
{
    font_24 = TTF_OpenFont("assets/fonts/noto-sans/NotoSansJP-Regular.ttf", 24);
    font_36 = TTF_OpenFont("assets/fonts/noto-sans/NotoSansJP-Regular.ttf", 36);
    font_48 = TTF_OpenFont("assets/fonts/noto-sans/NotoSansJP-Regular.ttf", 48);
    if (!font_24 || !font_36 || !font_48)
    {
        std::cerr << "Error: Failed to load font size: " << TTF_GetError() << std::endl;
    }
}

void load_music(std::string songTitle)
{
    if (currentSong != songTitle)
    {
        music = Mix_LoadMUS(songTitle.c_str());
        if (!music)
        {
            std::cerr << "Error: Failed to load music: " << Mix_GetError() << std::endl;
            music = nullptr;
        }
        else
        {
            Mix_PlayMusic(music, -1); // Set loops to -1 for infinite looping
            isMusicPlaying = true;
            currentSong = songTitle;
            std::cout << "Music playing is: " << songTitle << std::endl;
        }
    }
}

void render_text(const std::string &text, int x, int y)
{
    TTF_Font *font = nullptr;
    if (fontSize == 24)
    {
        font = font_24;
    }
    else if (fontSize == 36)
    {
        font = font_36;
    }
    else if (fontSize == 48)
    {
        font = font_48;
    }

    if (font)
    {
        SDL_Color textColor = {0, 0, 0};
        SDL_Surface *textSurface = TTF_RenderUTF8_Solid(font, text.c_str(), textColor);

        if (textSurface)
        {
            // Calculate textWidth and textHeight using TTF_SizeText
            int textWidth, textHeight;
            TTF_SizeText(font, text.c_str(), &textWidth, &textHeight);

            SDL_Texture *textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_FreeSurface(textSurface);

            if (textTexture)
            {
                SDL_Rect textRect = {x, y, textWidth, textHeight};
                SDL_RenderCopy(renderer, textTexture, nullptr, &textRect);
                SDL_DestroyTexture(textTexture);
            }
        }
    }
}

SDL_Texture* load_texture(const char* path, const char* name)
{
    SDL_Texture* texture = IMG_LoadTexture(renderer, path);
    if (!texture)
    {
        std::cerr << "Error: Failed to load " << name << ": " << IMG_GetError() << std::endl;
    }
    else
    {
        std::cout << "Successfully loaded " << name << std::endl;
    }
    return texture;
}

void load_textures() 
{
    // Splash screen
    splashScreenTexture = load_texture("assets/graphics/backgrounds/AgniSamooh-HD-logo.png", "Developer Splash screen");
}

void start_SDL()
{
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
    {
        std::cerr << "Error: Failed to initialize SDL: " << SDL_GetError() << std::endl;
        exit(1);
    }

    if (TTF_Init() != 0)
    {
        std::cerr << "Error: Failed to initialize SDL Font: " << TTF_GetError() << std::endl;
        SDL_Quit();
        exit(1);
    }

    if (IMG_Init(IMG_INIT_PNG) != IMG_INIT_PNG)
    {
        std::cerr << "Error: Failed to initialize SDL IMG: " << IMG_GetError() << std::endl;
        SDL_Quit();
        exit(1);
    }

    if (Mix_Init(MIX_INIT_MP3) != MIX_INIT_MP3)
    {
        std::cerr << "Error: Failed to initialize Audio: " << Mix_GetError() << std::endl;
        SDL_Quit();
        exit(1);
    }

    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 4096) == -1)
    {
        std::cerr << "Error: Failed to open audio channel: " << Mix_GetError() << std::endl;
        SDL_Quit();
        exit(1);
    }

    window = SDL_CreateWindow("sdl_engine", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, windowWidth, windowHeight, SDL_WINDOW_SHOWN);
    if (!window)
    {
        std::cerr << "Error: Failed to create SDL Window: " << SDL_GetError() << std::endl;
        exit(1);
        return;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer)
    {
        std::cerr << "Error: Failed to create SDL Renderer: " << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        exit(1);
        return;
    }
    load_fonts(); // Load fonts here
    load_textures();
    load_music(songTitle);
}

void handle_events()
{
    while (SDL_PollEvent(&event))
    {
        if (event.type == SDL_QUIT)
        {
            quit = true;
        }
        // Handle other events as needed
    }
}
void update()
{
}
void draw()
{
    // Render background colour
    SDL_SetRenderDrawColor(renderer, 128, 128, 128, 255); // RGB value for Grey

    // Clear the renderer
    SDL_RenderClear(renderer);

    // Render a green rectangle
    SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); // RGB value for Red
    SDL_Rect rect = { 200, 200, 200, 200 }; // Define the rectangle's position (x, y) and size (width, height)
    SDL_RenderFillRect(renderer, &rect); // Draw the filled rectangle

    // Render your content here
    render_text("test", 300, 300);

    // Update the screen
    SDL_RenderPresent(renderer);
}

void run_SDL()
{
    while (!quit)
    {
        // Event handling loop
        handle_events();
        update();
        draw();
    }
}

void end_SDL()
{
    // Stop the music
    Mix_HaltMusic();
    Mix_FreeMusic(music);

    // Free the sound effect
    Mix_FreeChunk(sfx);

    // Close the audio system
    Mix_CloseAudio();

    // Free fonts
    TTF_CloseFont(font_24);
    TTF_CloseFont(font_36);
    TTF_CloseFont(font_48);

    // Destroy textures
    SDL_DestroyTexture(splashScreenTexture);

    // Close game controller
    if (controller)
    {
        SDL_GameControllerClose(controller);
    }

    // Destroy renderer and window
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);

    // Quit SDL subsystems
    Mix_Quit();
    TTF_Quit();
    IMG_Quit();
    SDL_Quit();
}

int main(int argc, char *argv[])
{
    start_SDL();

    // Display the splash screen for 2 seconds
    SDL_RenderCopy(renderer, splashScreenTexture, NULL, NULL);
    SDL_RenderPresent(renderer);
    SDL_Delay(1000);

    run_SDL();
    end_SDL();
    return 0;
}